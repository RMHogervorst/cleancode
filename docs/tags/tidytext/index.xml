<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidytext on Clean Code (and R-fun)</title>
    <link>/tags/tidytext/</link>
    <description>Recent content in Tidytext on Clean Code (and R-fun)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hogervorst.rm@gmail.com (Roel M. Hogervorst)</managingEditor>
    <webMaster>hogervorst.rm@gmail.com (Roel M. Hogervorst)</webMaster>
    <lastBuildDate>Tue, 29 May 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/tidytext/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sentiment of Security Now! over time</title>
      <link>/blog/2018/05/29/sentiment-of-security-now-over-time/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>/blog/2018/05/29/sentiment-of-security-now-over-time/</guid>
      <description>&lt;p&gt;If you believe some people, everything is getting worse&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. More so in infosec. For the past few years I listened to many many hours of podcasts, many hours where spent on the weekly show &lt;a href=&#34;https://twit.tv/shows/security-now&#34;&gt;Security Now!&lt;/a&gt;. The hosts Steven Gibson and Leo Laporte have been talking about security related news every week over 13 years. Although the content has changed over time, there used to be more explanations but the majority of time is now filled with news, we could use the sentiment in the episodes to see if ‘everything is getting worse’. Has the sentiment of the security now! podcast changed over time? It helps that every episode is transcribed into text so we can use natural language processing tools to work through this problem.&lt;/p&gt;
&lt;div id=&#34;extracting-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extracting the data&lt;/h2&gt;
&lt;p&gt;To gather and extract the relevant information from the transcripts I point you kindly to a seperate github page where I explain how I downloaded every episode and extracted the structure. &lt;a href=&#34;https://github.com/RMHogervorst/NLP_SN&#34; class=&#34;uri&#34;&gt;https://github.com/RMHogervorst/NLP_SN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I asked permission to scrape all the transcripts but I’m not entirely sure if I can share the content. In any case I’d guide you to the links at the bottom of this page with all the archive. I might share the rda file with the episode information and transcripts into 1 dataframe.&lt;/p&gt;
&lt;p&gt;What I ended up with is a dataframe with 664 rows (the number of episodes today) and 9 columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidytext)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ───────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 2.2.1.9000     ✔ purrr   0.2.5     
## ✔ tibble  1.4.2          ✔ dplyr   0.7.5     
## ✔ tidyr   0.8.1          ✔ stringr 1.3.1     
## ✔ readr   1.1.1          ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ──────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(widyr) 
if(!file.exists(&amp;quot;df_sn.RDS&amp;quot;)){
    download.file(
        url = &amp;quot;https://github.com/RMHogervorst/NLP_SN/raw/master/df_sn.RDS&amp;quot;,
        destfile =  &amp;quot;df_sn.RDS&amp;quot;,cacheOK = TRUE)    
}

df_sn &amp;lt;- read_rds(&amp;quot;df_sn.RDS&amp;quot;)  
#df_sn &amp;lt;- read_rds(&amp;quot;../NLP_SN/df_sn.RDS&amp;quot;) # when working locally
# 
# Every week / or once a month at least I will update the file with new transcript(s) so your data could be newer than this post.
#dim_desc(df_sn)
tail(df_sn,2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 9
##   path             source date  description ep_nr hosts teaser title text 
##   &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;lis&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;lis&amp;gt;
## 1 data//sn-663.txt https… May … This week …   663 &amp;lt;lis… It&amp;#39;s … Ultr… &amp;lt;tib…
## 2 data//sn-664.txt https… May … This week …   664 &amp;lt;lis… It&amp;#39;s … Spec… &amp;lt;tib…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text column contains a tibble with a row for everytime anyone speaks untill the other takes over. The length&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_sn[664,9][[1]][[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 139 x 3
##    linenr text                                                     speaker
##     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                                    &amp;lt;chr&amp;gt;  
##  1      1 This is Security Now! with Steve Gibson, Episode 664, r… LEO    
##  2      2 Yay, Leo, great to be with you again, as always.         STEVE  
##  3      3 Always a pleasure.                                       LEO    
##  4      4 Yeah, we scrambled here a little bit at the end because… STEVE  
##  5      5 [Crosstalk] half an hour ago.  No, but I also figured y… LEO    
##  6      6 &amp;quot;Well, yeah.  Two weeks ago the news leaked through Hei… STEVE  
##  7      7 They were presumably waiting to disclose until companie… LEO    
##  8      8 Yes.  And even so, I mean, this is - what we heard was … STEVE  
##  9      9 Right.                                                   LEO    
## 10     10 I can&amp;#39;t square that with the news of two because all we… STEVE  
## # ... with 129 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Steve talks a lot more then Leo, and we see that in the number of words per line of a single episode:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_sn[664,9][[1]][[1]] %&amp;gt;% 
    mutate(
        nr_char = str_length(text),
        N_words = str_count(text, &amp;quot;\\w+&amp;quot;)
        ) %&amp;gt;% 
    ggplot(aes(linenr, N_words, fill = speaker))+
    geom_col()+
    labs(
        title = &amp;quot;Number of words in every line in episode 664&amp;quot;,
        subtitle = &amp;quot;Steve talks a lot more than Leo (not surprising)&amp;quot;,
        x = &amp;quot;line number&amp;quot;, y = &amp;quot;Number of words (log2 scale)&amp;quot;,
        caption = &amp;quot;Transcripts Security Now! - 664&amp;quot;
    )+
    scale_y_continuous(trans = &amp;quot;log2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-29-sentiment-of-security-now-over-time_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Interestingly my scraper seems to not have detected who said the words on line 45. It was Steve.&lt;/p&gt;
&lt;p&gt;It might be better to use an average over the episode&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_sn[664,9][[1]][[1]] %&amp;gt;% 
    mutate(
        N_words = str_count(text, &amp;quot;\\w+&amp;quot;),
        speaker = ifelse(is.na(speaker), &amp;quot;STEVE&amp;quot;, speaker)
        ) %&amp;gt;% 
    ggplot(aes(speaker, N_words, fill = speaker))+
    geom_violin()+
    geom_jitter(height = 0,width = .2, alpha  = 2/3)+
    scale_y_continuous(trans = &amp;quot;log2&amp;quot;)+
    labs(
        title = &amp;quot;Number of words in every line in episode 664&amp;quot;,
        subtitle = &amp;quot;Steve has a few more long pieces&amp;quot;,
        x = &amp;quot;&amp;quot;, y = &amp;quot;Number of words (log2 scale)&amp;quot;,
        caption = &amp;quot;Transcripts Security Now! - 664&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-29-sentiment-of-security-now-over-time_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;links&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.grc.com/securitynow.htm&#34;&gt;Archive of transcripts and audio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;state-of-the-machine&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;State of the machine&lt;/h5&gt;
&lt;p&gt;&lt;details&gt; &lt;summary&gt; At the moment of creation (when I knitted this document ) this was the state of my machine: &lt;click&gt; &lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ──────────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 3.4.4 (2018-03-15)
##  os       Ubuntu 18.04 LTS            
##  system   x86_64, linux-gnu           
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       Europe/Amsterdam            
##  date     2018-06-01                  
## 
## ─ Packages ──────────────────────────────────────────────────────────────
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.4.3)                    
##  backports     1.1.2      2017-12-13 CRAN (R 3.4.3)                    
##  bindr         0.1.1      2018-03-13 CRAN (R 3.4.4)                    
##  bindrcpp    * 0.2.2      2018-03-29 CRAN (R 3.4.4)                    
##  blogdown      0.6        2018-04-18 CRAN (R 3.4.4)                    
##  bookdown      0.7        2018-02-18 CRAN (R 3.4.3)                    
##  broom         0.4.4      2018-03-29 CRAN (R 3.4.4)                    
##  cellranger    1.1.0      2016-07-27 CRAN (R 3.4.3)                    
##  cli           1.0.0      2017-11-05 CRAN (R 3.4.3)                    
##  clisymbols    1.2.0      2017-05-21 cran (@1.2.0)                     
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.4.3)                    
##  crayon        1.3.4      2017-09-16 CRAN (R 3.4.3)                    
##  digest        0.6.15     2018-01-28 CRAN (R 3.4.3)                    
##  dplyr       * 0.7.5      2018-05-19 cran (@0.7.5)                     
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.4.3)                    
##  forcats     * 0.3.0      2018-02-19 CRAN (R 3.4.3)                    
##  foreign       0.8-69     2017-06-21 CRAN (R 3.4.2)                    
##  ggplot2     * 2.2.1.9000 2018-02-22 Github (tidyverse/ggplot2@39e4a3b)
##  glue          1.2.0.9000 2018-05-21 Github (tidyverse/glue@7230ed2)   
##  gtable        0.2.0      2016-02-26 CRAN (R 3.4.3)                    
##  haven         1.1.1      2018-01-18 CRAN (R 3.4.3)                    
##  hms           0.4.2      2018-03-10 CRAN (R 3.4.4)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.4.3)                    
##  httr          1.3.1      2017-08-20 CRAN (R 3.4.3)                    
##  janeaustenr   0.1.5      2017-06-10 CRAN (R 3.4.3)                    
##  jsonlite      1.5        2017-06-01 CRAN (R 3.4.3)                    
##  knitr         1.20       2018-02-20 CRAN (R 3.4.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.4.3)                    
##  lattice       0.20-35    2017-03-25 CRAN (R 3.4.2)                    
##  lazyeval      0.2.1      2017-10-29 CRAN (R 3.4.3)                    
##  lubridate     1.7.4      2018-04-11 CRAN (R 3.4.4)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.4.3)                    
##  Matrix        1.2-14     2018-04-09 CRAN (R 3.4.4)                    
##  mnormt        1.5-5      2016-10-15 CRAN (R 3.4.3)                    
##  modelr        0.1.2      2018-05-11 CRAN (R 3.4.4)                    
##  munsell       0.4.3      2016-02-13 CRAN (R 3.4.3)                    
##  nlme          3.1-137    2018-04-07 CRAN (R 3.4.4)                    
##  pillar        1.2.2      2018-04-26 CRAN (R 3.4.4)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.4.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.4.3)                    
##  psych         1.8.4      2018-05-06 CRAN (R 3.4.4)                    
##  purrr       * 0.2.5      2018-05-29 cran (@0.2.5)                     
##  R6            2.2.2      2017-06-17 CRAN (R 3.4.3)                    
##  Rcpp          0.12.17    2018-05-18 cran (@0.12.17)                   
##  readr       * 1.1.1      2017-05-16 CRAN (R 3.4.3)                    
##  readxl        1.1.0      2018-04-20 CRAN (R 3.4.4)                    
##  reshape2      1.4.3      2017-12-11 CRAN (R 3.4.3)                    
##  rlang         0.2.0.9001 2018-05-31 Github (tidyverse/rlang@4e7e8f7)  
##  rmarkdown     1.9        2018-03-01 CRAN (R 3.4.3)                    
##  rprojroot     1.3-2      2018-01-03 CRAN (R 3.4.3)                    
##  rstudioapi    0.7        2017-09-07 CRAN (R 3.4.3)                    
##  rvest         0.3.2      2016-06-17 CRAN (R 3.4.3)                    
##  scales        0.5.0.9000 2018-05-03 Github (hadley/scales@d767915)    
##  sessioninfo   1.0.0      2017-06-21 cran (@1.0.0)                     
##  SnowballC     0.5.1      2014-08-09 CRAN (R 3.4.3)                    
##  stringi       1.2.2      2018-05-02 CRAN (R 3.4.4)                    
##  stringr     * 1.3.1      2018-05-10 CRAN (R 3.4.4)                    
##  tibble      * 1.4.2      2018-01-22 CRAN (R 3.4.3)                    
##  tidyr       * 0.8.1      2018-05-18 CRAN (R 3.4.4)                    
##  tidyselect    0.2.4      2018-02-26 CRAN (R 3.4.3)                    
##  tidytext    * 0.1.8      2018-03-21 CRAN (R 3.4.4)                    
##  tidyverse   * 1.2.1      2017-11-14 CRAN (R 3.4.3)                    
##  tokenizers    0.2.1      2018-03-29 CRAN (R 3.4.4)                    
##  utf8          1.1.4      2018-05-24 CRAN (R 3.4.4)                    
##  widyr       * 0.1.1      2018-03-11 CRAN (R 3.4.4)                    
##  withr         2.1.2      2018-03-15 CRAN (R 3.4.4)                    
##  xfun          0.1        2018-01-22 CRAN (R 3.4.3)                    
##  xml2          1.2.0      2018-01-24 CRAN (R 3.4.3)                    
##  yaml          2.1.19     2018-05-01 cran (@2.1.19)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Not if we learn from Hans Rosling but that is a story for an other time&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Generate text using Markov Chains (sort of)</title>
      <link>/blog/2017/01/21/content/post/2017-01-21-markov-chain/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>/blog/2017/01/21/content/post/2017-01-21-markov-chain/</guid>
      <description>

&lt;p&gt;Inspired by the hilarious podcast &lt;a href=&#34;gagh.biz&#34; title=&#34;A podcast by two people who are a little embarrassed to have a podcast about Star Trek the Next Generation&#34;&gt;The Greatest Generation&lt;/a&gt;, I have worked again with all the lines from all the episode scripts of TNG.
Today I will make a clunky bot (although it does nothing and is absolutely not useful) that talks like Captain Picard.
I actually wanted to use a Markov Chain to generate text. A Markov Chain has a specific property. It doesn&amp;rsquo;t care what happened before, it only looks at probabilities from the current state to a next state.&lt;/p&gt;

&lt;h3 id=&#34;markov-chains&#34;&gt;Markov Chains&lt;/h3&gt;

&lt;p&gt;An example is a board game based on dice throws. Every time I throw the die there are equal opportunities to go from my current side to any other side. In this case every probability is equal, but when the die is loaded probabilities would change.&lt;/p&gt;

&lt;p&gt;In the current example I&amp;rsquo;m using all the phrases I extracted from the series TNG &lt;a href=&#34;For%20more%20info%20about%20this%20particular%20dataset,%20go%20to%20%3Chttp://github.com/rtrek%3E&#34;&gt;1&lt;/a&gt;. And then well use words that follow each other choosing &amp;ldquo;randomly&amp;rdquo; but weighted by occurrence.&lt;/p&gt;

&lt;h1 id=&#34;but-first-cleaning&#34;&gt;But first cleaning&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m using the packages dplyr, stringr, tidytext and tidyr.
If you&amp;rsquo;d like to follow along download the &lt;a href=&#34;https://github.com/RTrek/TNG/raw/master/data/TNG.rda&#34; title=&#34;this link goes to the dataset ~26 mb, if you don&#39;t trust that, go to that repo and download the csv file from data-raw&#34;&gt;dataset&lt;/a&gt; and load it in R with load(&amp;ldquo;path to file&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;The dataset itself is rather large &lt;code&gt;dim(TNG) #110176     17&lt;/code&gt; with 11 thousand rows and 17 variables. However we will only use the variables &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;who&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;. &lt;code&gt;Type&lt;/code&gt; contains either &amp;ldquo;description&amp;rdquo; or &amp;ldquo;speech&amp;rdquo;. We only need speech. Because I was a novice and because in general I&amp;rsquo;m not very tidy &lt;a href=&#34;Which%20is%20rather%20ironic%20since%20I%20like%20to%20adore%20to%20Tidy%20principles...&#34;&gt;2&lt;/a&gt; this dataset is rather dirty. I copied and did not sanitize the who part. This means that if you filter on &amp;ldquo;Riker&amp;rdquo;, you will not get everything he said. The script has weird things like: &amp;ldquo;Riker&amp;rsquo;s com voice&amp;rdquo;, &amp;ldquo;Riker&amp;rsquo;s voice&amp;rdquo; and several variants of &amp;ldquo;V.O.&amp;rdquo; (means voice over).&lt;/p&gt;

&lt;h2 id=&#34;cleaning-the-who-column&#34;&gt;Cleaning the who column&lt;/h2&gt;

&lt;p&gt;We have to clean out the who column, filter only the rows that contain speech. Perhaps we also want to select only rows for certain characters. And finally we want to cut up the text into bigrams or trigrams. Thanks to an excellent &lt;a href=&#34;http://tidytextmining.com/&#34; title=&#34;free to read on the internet&#34;&gt;book&lt;/a&gt; by Julia Silge and David Robinson this was surprisingly easy to do. I cannot recommend their package &lt;a href=&#34;https://cran.r-project.org/package=tidytext&#34;&gt;tidytext&lt;/a&gt; enough, truly awesome!&lt;/p&gt;

&lt;p&gt;You could do the following steps all in one pipe, but for clarity sake, and your sanity, we will take smaller steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;speech_TNG &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; TNG &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;type &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;speech&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# select only speech parts&lt;/span&gt;
        mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;who &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; str_replace&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;who&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;S COM VOICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; 
                       str_replace&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\\(.{1,}\\)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                       str_replace&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;.{1,}\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                       str_replace&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;YOUNG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                       str_replace&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;S VOICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                       str_trim&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks crazy, but don&amp;rsquo;t despair:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assign to speech_TNG the result of:&lt;/li&gt;
&lt;li&gt;take TNG &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;return only the rows where type is &amp;ldquo;speech&amp;rdquo; &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mutate the who column by

&lt;ul&gt;
&lt;li&gt;replacing from the who column &amp;ldquo;&amp;rsquo;S COM VOICE&amp;rdquo; with nothing &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replacing a &amp;ldquo;(&amp;rdquo; followed by at least 1 any character followed by a &amp;ldquo;)&amp;rdquo; with nothing &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replacing quotation marks (&amp;rdquo; &amp;ldquo;) with any characters in between with nothing &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replacing YOUNG with nothing &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replacing &amp;rsquo;s voice with nothing &lt;code&gt;THEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;trimming all whitespace at start and end&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How did I know how to build this enormous pipe? I took a sample of the who column and tried stuff untill it suited my needs [3].&lt;/p&gt;

&lt;p&gt;[3]: for example &lt;code&gt;sample &amp;lt;- TNG %&amp;gt;% filter(type == &amp;quot;speech&amp;quot;) %&amp;gt;% select(who) %&amp;gt;% sample_n(20) %&amp;gt;% .$who&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;extracting-bi-and-trigrams-per-character&#34;&gt;Extracting bi- and trigrams per character&lt;/h1&gt;

&lt;p&gt;And now we can create seperate datasets for every character.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;bigrams_data &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; speech_TNG &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;who &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;DATA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        unnest_tokens&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bigram&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; text&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; token &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ngrams&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;to_lower &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        separate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bigram&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;word1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;word2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; sep &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        count&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;word1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; word2&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; sort &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the &lt;code&gt;unnest_tokens&lt;/code&gt; command from the tidytext package. This command will take your cell with text and extract either sentences, words, ngrams or paragraphs. It also converts everything to lowercase and delete any punctuation. The resulting variable I now call &amp;ldquo;bigram&amp;rdquo;. Then I take that variable &amp;ldquo;bigram&amp;rdquo; and split it up into two variables calling them &amp;ldquo;word1&amp;rdquo; and &amp;ldquo;word2&amp;rdquo;. Finally I count how many times the combinations occur.&lt;/p&gt;

&lt;p&gt;For Picard, the bigrams would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;bigrams_picard &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; speech_TNG &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;who &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;PICARD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        unnest_tokens&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bigram&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; text&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; token &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ngrams&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;to_lower &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        separate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bigram&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;word1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;word2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; sep &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        count&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;word1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; word2&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; sort &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And his trigrams would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;trigrams_picard &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; speech_TNG &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;who &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;PICARD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        unnest_tokens&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;trigram&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; text&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; token &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ngrams&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;to_lower &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        separate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;trigram&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;word1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;word2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;word3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; sep &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
        count&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;word1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; word2&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;word3&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; sort &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;creating-a-markov-chain-sort-of&#34;&gt;Creating a markov chain (sort of)&lt;/h1&gt;

&lt;p&gt;My endproduct takes two words and tries to find a third word. Then it takes the final two words and tries to find another word untill the sentance has a length that I specify at the start.&lt;/p&gt;

&lt;p&gt;What I actually created is a trigram dataframe, and a function that searches that frame. The function takes two words and returns all the rows where the first word matches the first column and the second word matches the second column.&lt;/p&gt;

&lt;p&gt;Furthermore I made a sentence creator, a function where you supply the first two words and the length of the sentence. That function keeps using the last words in the sentence until the correct length is achieved. With the fallback method of using bigrams when the trigrams don&amp;rsquo;t work anymore it could still fail, but not so often.&lt;/p&gt;

&lt;h3 id=&#34;word-generator&#34;&gt;Word generator&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;return_third_word &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; woord1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        woord &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; trigrams_picard &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;word1 &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; woord1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;word2 &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                sample_n&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; weight &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                &lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;word3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
        woord
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However this function sometimes returns an empty row. So I baked in a backup for when it can&amp;rsquo;t find the word combination.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;return_third_word &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; woord1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        woord &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; trigrams_picard &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;word1 &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; woord1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;word2 &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                sample_n&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; weight &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                &lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;word3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;woord&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
                bleh &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;bigrams_picard&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;word1 &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
                        sample_n&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; weight &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;kp&#34;&gt;warning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;no word found, adding &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; bleh&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; woord1 &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                woord &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; bleh
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        woord
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;From trigrams_picard,&lt;/li&gt;
&lt;li&gt;return the rows where word 1 matches woord1, and word2 matches woord2.&lt;/li&gt;
&lt;li&gt;Of those rows * return a single random row, where the randomness is weighted by occurrence. * Return the single word.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also used a bit of &lt;a href=&#34;http://rmhogervorst.nl/cleancode/blog/2016/06/13/NSE_standard_evaluation_dplyr.html&#34; title=&#34;link to NSE article&#34;&gt;non-standard evalation (NSE)&lt;/a&gt; just for fun.&lt;/p&gt;

&lt;h3 id=&#34;sentence-generator&#34;&gt;Sentence generator&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;generate_sentence &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;word1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; word2&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; sentencelength &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; debug &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#input validation&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sentencelength &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;I need more to work with&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        sentencelength &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; sentencelength &lt;span class=&#34;m&#34;&gt;-2&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# starting&lt;/span&gt;
        sentence &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;word1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; word2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        woord1 &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; word1
        woord2 &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; word2
        &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;seq_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sentencelength&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
                &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;debug &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                word &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; return_third_word&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; woord1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; woord2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                sentence &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sentence&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; word&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                woord1 &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; woord2
                woord2 &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; word
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        output &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;paste&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;sentence&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; collapse &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        output
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Check that there are more then 2 lenght.&lt;/li&gt;
&lt;li&gt;Loop a certain times

&lt;ul&gt;
&lt;li&gt;in that loop use woord1 and woord 2 as input&lt;/li&gt;
&lt;li&gt;create a new word&lt;/li&gt;
&lt;li&gt;add that word to sentence&lt;/li&gt;
&lt;li&gt;change the values of woord1 and woord2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;output the sentance with all the words in one line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example this created for me: &lt;code&gt;generate_sentence(&amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, 9)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;i am loathe to do with you because they&amp;quot;
&amp;quot;i am not the case however wesley is alive&amp;quot;
&amp;quot;i am aware of the tachyon pulse it might be able to determine how to&amp;quot;
# and with the enterprise and length 9
&amp;quot;the enterprise we use the cloak to escape do&amp;quot;
 &amp;quot;the enterprise we have had&amp;quot;
 &amp;quot;the enterprise for a thing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s incredibly slow and inefficient, but hey, it&amp;rsquo;s a toy project!&lt;/li&gt;
&lt;li&gt;Also it failed on me multiple times on 15 length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right it makes no sense whatsover. Thanks for following along!&lt;/p&gt;

&lt;p&gt;Do you have suggestions, improvements, found errors? open an issue or email me. &lt;a href=&#34;https://github.com/RMHogervorst/cleancode/issues/new/&#34;&gt;https://github.com/RMHogervorst/cleancode/issues/new/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>