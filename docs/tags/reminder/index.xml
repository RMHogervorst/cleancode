<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reminder on Clean Code (and R-fun)</title>
    <link>/cleancode/tags/reminder/</link>
    <description>Recent content in Reminder on Clean Code (and R-fun)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hogervorst.rm@gmail.com (Roel M. Hogervorst)</managingEditor>
    <webMaster>hogervorst.rm@gmail.com (Roel M. Hogervorst)</webMaster>
    <lastBuildDate>Sat, 09 Jul 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/cleancode/tags/reminder/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Submitting your first package to CRAN, my experience</title>
      <link>/cleancode/blog/2016/07/09/content/post/2016-07-09-submtting-to-cran-first-experience/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>/cleancode/blog/2016/07/09/content/post/2016-07-09-submtting-to-cran-first-experience/</guid>
      <description>

&lt;p&gt;I recently published my first R package to  The Comprehensive R Archive Network  (CRAN). It was very exciting and also quite easy. Let me walk you through my process.&lt;/p&gt;

&lt;p&gt;First a description of my brand new package: badgecreatr, then a description of steps to take for submission.&lt;/p&gt;

&lt;h1 id=&#34;package-description&#34;&gt;Package description&lt;/h1&gt;

&lt;p&gt;When you go around github looking at projects you often see these interesting images in the readme
&lt;a href=&#34;https://travis-ci.org/hadley/ggplot2&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hadley/ggplot2.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://cran.r-project.org/package=ggplot2&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/ggplot2&#34; alt=&#34;CRAN_Status_Badge&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ones you see above are from &lt;a href=&#34;https://github.com/hadley/ggplot2&#34;&gt;ggplot2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What are these? These are what we call badges or shields and they are often actively generated to indicate if software is actually working or not.&lt;/p&gt;

&lt;p&gt;Travis-ci, a continous integration service, creates the first one: the one that says build | passing. Everytime a new commit is pushed to Github a new version of the package will be build and tested. Of that test passes without problem the badge will remain green, but if the latest build fails, the green part will turn red like so &lt;a href=&#34;https://travis-ci.org/RMHogervorst/badgecreatr&#34;&gt;&lt;img src=&#34;https://travis-ci.org/RMHogervorst/badgecreatr.svg?branch=develop&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt; &amp;lt;- this is my develop branch of badgecreatr that fails while I write this. It could turn green if your read this later on.&lt;/p&gt;

&lt;p&gt;The point of these badges is that they quickly signal some quality aspects of your package to new users. I think these badges are incredibly useful, but I found it tedious to copy them to every new project I had, with some small tweaks for different packages &lt;em&gt;(I&amp;rsquo;m making this a big deal but I have only build 3 packages)&lt;/em&gt;. Since you will use almost the same badges for many projects  I thought it would be interesting to create a package that would copy them in your readme file with one command.
I was not the first one with this idea, someone created the briljant badgerbadgerbadger which does the same thing for ruby on rails projects.&lt;/p&gt;

&lt;p&gt;After some thoughts I decided to submit it to CRAN so that people can download it from within R without the use of devtools. So that was the why.&lt;/p&gt;

&lt;h1 id=&#34;why-would-you-submit-a-package-to-cran&#34;&gt;Why would you submit a package to CRAN?&lt;/h1&gt;

&lt;p&gt;The main advantage to getting your package on CRAN is that it will be easier for users to install (with install.packages). Your package will also be tested daily on multiple systems &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&#34;how-do-you-submit-a-package-to-cran&#34;&gt;How do you submit a package to CRAN?&lt;/h1&gt;

&lt;p&gt;Well, the good people of CRAN have put it on the bottom of their &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;main page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To “submit” a package to CRAN, check that your submission meets the CRAN Repository Policy and then use the web form.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mainly you need to run r cmd-check on your package and make sure there are no warnings, and no notes. Or if there are notes, you have to explain them to the people of CRAN. So what does r-cmd-check actually do? It checks if your package can be build and installed and removed without problems, it checks for common problems in naming and if accurate documentation is provided. In other words, it checks if your package will play nice with R and possible other packages, and if people can actually read what you said about your functions in the package. r-cmd-check also checks if your DESCRIPTION and NAMESPACE files are correctly formatted.&lt;/p&gt;

&lt;p&gt;You also have to do some effort to check if your package will work on other systems (solaris,  FreeBSD, Linux, Windows, MacOS, more?). Since I work on a windows computer, I know it works on my computer. But since I push all my code to Github, and I use Travis-CI, after each commit the entire package is checked on linux (or more, I could even put several mac OS versions in the test I believe).&lt;/p&gt;

&lt;p&gt;Furthermore I checked the functionality of most of the code with unit tests. So I was pretty sure it worked on all systems, also because I haven&amp;rsquo;t used complicated programs that could differ in systems.&lt;/p&gt;

&lt;p&gt;The submission process is quite easy, you have to give your name, your email and then you can add your package (the tarball). It is a simple point and click form.&lt;/p&gt;

&lt;p&gt;The website reads a part of your package, you have to check if the information is correct. Then you have to promise that you read the information and you hit submit.&lt;/p&gt;

&lt;h1 id=&#34;what-happens-after-i-submit-a-package&#34;&gt;What happens after I submit a package?&lt;/h1&gt;

&lt;p&gt;You receive a confirmation mail with everything you typed in the website.
And someone looks over the submission to see if you missed something and if the package works.&lt;/p&gt;

&lt;p&gt;I recieved an e-mail back (really fast!), to tell me that I mistyped some things (too bad that devtools or R-cmd-check doesn&amp;rsquo;t check for these things).
I was very excited and quickly did a resubmission (which is identical to a first submission, but I explained what I changed according to their comments )&lt;/p&gt;

&lt;p&gt;Things that I should have done that I forgot or didn&amp;rsquo;t notice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single quote software names so &amp;lsquo;Windows 8.1&amp;rsquo;&lt;/li&gt;
&lt;li&gt;write R and CRAN with caps, not small letters&lt;/li&gt;
&lt;li&gt;I wrote github, projectstatus, travis, rmd etc which should have been:&lt;/li&gt;
&lt;li&gt;&amp;lsquo;Github&amp;rsquo;, Projectstatus, &amp;lsquo;Travis-CI&amp;rsquo; etc.&lt;/li&gt;
&lt;li&gt;linked to a URL that didn&amp;rsquo;t exist yet&lt;/li&gt;
&lt;li&gt;used a link with http, should have been https&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was it, it took me 2 rounds but then it was finished, I received an email with: &amp;ldquo;on CRAN now.  Best (name of the reviewer)&amp;rdquo;. that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s on CRAN now: &lt;a href=&#34;https://cran.r-project.org/web/packages/badgecreatr/index.html&#34;&gt;https://cran.r-project.org/web/packages/badgecreatr/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;general-remarks&#34;&gt;General remarks&lt;/h2&gt;

&lt;p&gt;CRAN submission used to be really hard, you had to manually write all the documentation in a seperate file, had to hand check everything, you had to search for computers to test your package on, etc. But with devtools and the excellent manuals online, starting and building a package is really easy. The final step of submission takes almost no work if you followed best practices beforehand.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;

&lt;p&gt;I had a lot of help from the following sources about writing r packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a very short but extremely useful example of writing packages by Hillary Parker &lt;a href=&#34;https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/&#34;&gt;https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hadley Wickham&amp;rsquo;s book about writing packages &lt;a href=&#34;http://r-pkgs.had.co.nz/&#34;&gt;http://r-pkgs.had.co.nz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Karl Broman about writing packages &lt;a href=&#34;http://kbroman.org/pkg_primer/&#34;&gt;http://kbroman.org/pkg_primer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You actually have to search for things in the policies, which is a bit dense, but quite ok. &lt;a href=&#34;https://cran.r-project.org/web/packages/policies.html&#34;&gt;https://cran.r-project.org/web/packages/policies.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the ropensci organisation has some excellent advise on writing packages &lt;a href=&#34;https://github.com/ropensci/packaging_guide&#34;&gt;https://github.com/ropensci/packaging_guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;This I outright copied from Karl Broman found here &lt;a href=&#34;http://kbroman.org/pkg_primer/pages/cran.html&#34;&gt;http://kbroman.org/pkg_primer/pages/cran.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Non-standard-evaluation and standard evaluation in dplyr</title>
      <link>/cleancode/blog/2016/06/13/content/post/2016-06-13-nse_standard_evaluation_dplyr/</link>
      <pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>/cleancode/blog/2016/06/13/content/post/2016-06-13-nse_standard_evaluation_dplyr/</guid>
      <description>

&lt;p&gt;THIS POST IS NO LONGER ENTIRELY RELEVANT. DPLYR 0.7 HAS A SLIGHTLY DIFFERENT (AND SLIGHTLY MORE INTUITIVE) WAY OF WORKING WITH NON-STANDARD EVALUATION.&lt;/p&gt;

&lt;p&gt;I love the dplyr package with all of its functions, however if you use normal dplyr in functions in your package r-cmd-check will give you a warning: &lt;code&gt;R CMD check NOTE: No visible binding for global variable NAME OF YOUR VARIABLE&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. The functions do work, and everything is normal, however if you submit your package to CRAN, such a NOTE is not acceptable. A workaround is to add globalVariables to one of your scripts. for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;globalVariables&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;var1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;var2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;varyourmother&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which works but it is not necessary.&lt;/p&gt;

&lt;h2 id=&#34;nse&#34;&gt;NSE&lt;/h2&gt;

&lt;p&gt;dplyr (and some other packages and functions) work with non-standard-evaluation (NSE). One example is &lt;code&gt;library(magrittr)&lt;/code&gt; vs &lt;code&gt;library(&amp;quot;magrittr&amp;quot;)&lt;/code&gt; , both work. But
&lt;code&gt;install.packages(magrittr)&lt;/code&gt; vs &lt;code&gt;install.packages(&amp;quot;magrittr&amp;quot;)&lt;/code&gt; is different, you need the quotes. In almost all the functions in r when you name a part of an object you need the quotes but in some functions you don’t. They are designed to work in a non-standard way. Some even miss a standard way.&lt;/p&gt;

&lt;p&gt;I will focus on the dplyr functions only, a general introduction to NON standard evaluation might come later.&lt;/p&gt;

&lt;p&gt;Under the hood the dplyr functions work just as other functions, in fact
all the functions use normal evaluation (standard evaluation), but for interactive use there is a non standard evaluation version, which saves you typing. The interactive version is then first evaluated with the lazyeval package and is then sent to the SE version.
There is even a naming scheme &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:
&amp;gt; Every function that uses NSE should have a standard evaluation (SE) escape hatch that does the actual computation. The SE-function name should end with _.&lt;/p&gt;

&lt;p&gt;Therefore there are multiple verbs: select(), select&lt;em&gt;(), mutate(), mutate&lt;/em&gt;(), etc. Under the hood &lt;code&gt;select()&lt;/code&gt; is evaluated with the lazyeval package and sent to &lt;code&gt;select_()&lt;/code&gt;.
In functions you should use the SE versions, not only to stop notes from creating, but also because it gives you extra options.&lt;/p&gt;

&lt;h1 id=&#34;from-nse-the-standard-interactive-use-to-se-standard-evalation-within-functions&#34;&gt;From NSE (the standard interactive use) to SE (standard evalation within functions&lt;/h1&gt;

&lt;p&gt;So this is a list of things i regularly do with NSE and their translation in SE.&lt;/p&gt;

&lt;p&gt;I will use the data file about students in higher education in the Netherlands.&lt;/p&gt;

&lt;h3 id=&#34;background&#34;&gt;background&lt;/h3&gt;

&lt;p&gt;There are basicaly three ways to quote variables that dplyr/ lazyeval understands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with a formula &lt;code&gt;~mean(mpg)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;with quote()   &lt;code&gt;quote(mean(mpg))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;as a string  &lt;code&gt;&amp;quot;mean(mpg)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;select&#34;&gt;Select()&lt;/h2&gt;

&lt;p&gt;Example of the select function from dplyr.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dplyr&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# first the normal NSE version&lt;/span&gt;
select&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# standard evaluation &lt;/span&gt;
select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# comma doesn&amp;#39;t work, + doesn&amp;#39;t work&lt;/span&gt;
select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; FREQUENCY&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# nope&lt;/span&gt;
select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# yes!&lt;/span&gt;
select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;OPLEIDINGSNAAM.ACTUEEL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;FREQUENCY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;YEAR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;OPLEIDINGSFASE.ACTUEEL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# works&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [24,150 x 2]

   OPLEIDINGSNAAM.ACTUEEL FREQUENCY
                    (chr)     (int)
1     B Aarde en Economie       121
2     B Aarde en Economie        54
3     B Aarde en Economie       140
4     B Aarde en Economie        52
5     B Aarde en Economie       132
6     B Aarde en Economie        55
7     B Aarde en Economie       144
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filter&#34;&gt;Filter()&lt;/h2&gt;

&lt;p&gt;Then the filter function ( I also use the select function here)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ways that work. &lt;/span&gt;
filter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; YEAR &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2015&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; select&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;YEAR &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2015&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;YEAR &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2015&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;YEAR ==2015&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# or with a list to dots.&lt;/span&gt;
dotsfilter &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;OPLEIDINGSNAAM.ACTUEEL&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
filter_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;YEAR ==2015&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; select_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; dotsfilter&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [4,830 x 2]

         OPLEIDINGSNAAM.ACTUEEL FREQUENCY
                          (chr)     (int)
1           B Aarde en Economie       151
2           B Aarde en Economie        60
3           B Aardwetenschappen         0
4           B Aardwetenschappen       149
5           B Aardwetenschappen       335
6           B Aardwetenschappen         0
7           B Aardwetenschappen        83
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;group-by-summarize&#34;&gt;Group_by() &amp;amp; Summarize()&lt;/h2&gt;

&lt;p&gt;Group_by and summarize examples, see also the NSE vignette on dplyr &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;group_by&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;total &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; n&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# group by in SE, and summarize with NSE&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;total &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# both NSE, pass list of arguments to .dots&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;total &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# does not work&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# does work. &lt;/span&gt;
dots &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; dots&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; setNames&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dots&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sum(FREQUENCY)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
group_by_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;duo2015_tidy&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;GENDER&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; summarise_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;FREQUENCY&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [2 x 2]

  GENDER sum(FREQUENCY)
   (chr)          (int)
1    MAN         609755
2  VROUW         639609
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutate-and-slightly-more-advanced-use&#34;&gt;Mutate() and slightly more advanced use&lt;/h2&gt;

&lt;p&gt;You want to add two columns up, but you don&amp;rsquo;t yet know which columns that will be (example from Paul Hiemstra&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# normal interactive use  &lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dplyr&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
mtcars &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;new_column &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; mpg &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; wt&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you would like a function that does something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;f &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;col1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; col2&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; new_col_name&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    mtcars &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; mutate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;new_col_name &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; col1 &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; col2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem is that r will search for col1 and col2, which don&amp;rsquo;t exist.
Furthermore the name of the endresult will be new_col_name, and not the content of new_col_name. To get around non-standard evaluation, you can use the lazyeval package. The following function does what we expect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;f &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;col1&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; col2&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; new_col_name&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    mutate_call &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; lazyeval&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;interp&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; a &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; b&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;as.name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;col1&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; b &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;as.name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;col2&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    mtcars &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; mutate_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; setNames&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;mutate_call&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; new_col_name&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You first create a call that will be evaluated by mutate_ . the call is first interpreted so that the final and correct names are used by mutate_&lt;/p&gt;

&lt;p&gt;Of course if you already knew wich varibles you would use, there is no need for interpretation, and something like this would work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;mtcars &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; mutate_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; setNames&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;mpg&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;wt&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sum mpg wt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
mtcars &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt; mutate_&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.&lt;/span&gt;dots &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;mpg&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;wt&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if you don&amp;#39;t need the name specified&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;nse-in-context&#34;&gt;NSE in context&lt;/h1&gt;

&lt;p&gt;So if you want to use the dplyr functions in your own functions these are some variants that you could use. See the list of References and Notes for more information.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References:&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/26724124/standard-evaluation-in-dplyr-summarise-on-variable-given-as-a-character-string&#34;&gt;question on stack overflow&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.r-bloggers.com/using-mutate-from-dplyr-inside-a-function-getting-around-non-standard-evaluation/&#34;&gt;using mutate inside a function, shows excellent use of mutate function,  r-bloggers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.carlboettiger.info/2015/02/06/fun-standardizing-non-standard-evaluation.html&#34;&gt;fun standardizing NSE (he has a particular kind of fun&amp;hellip;)&lt;/a&gt;
&lt;a href=&#34;http://adv-r.had.co.nz/Computing-on-the-language.html&#34;&gt;advanced r chapter about NSE - hadley wickham&lt;/a&gt;
&lt;a href=&#34;http://developer.r-project.org/nonstandard-eval.pdf&#34;&gt;on r, I have not read this one &lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;notes&#34;&gt;NOTES&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;an issue that demonstrates the r cmd check NOTE. &lt;a href=&#34;https://github.com/Rdatatable/data.table/issues/850&#34;&gt;https://github.com/Rdatatable/data.table/issues/850&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;wow the package is updated yesterday, but this describes the naming &lt;a href=&#34;https://cran.r-project.org/web/packages/lazyeval/vignettes/lazyeval-old.html&#34;&gt;https://cran.r-project.org/web/packages/lazyeval/vignettes/lazyeval-old.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;NSE in dplyr &lt;a href=&#34;https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html&#34;&gt;https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;This example comes from Paul Hiemstra on his numbertheory blog that I found via r-bloggers. &lt;a href=&#34;http://www.numbertheory.nl/2015/09/23/using-mutate-from-dplyr-inside-a-function-getting-around-non-standard-evaluation/&#34;&gt;http://www.numbertheory.nl/2015/09/23/using-mutate-from-dplyr-inside-a-function-getting-around-non-standard-evaluation/&lt;/a&gt; With the reference to the r-bloggers version in the links above.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>