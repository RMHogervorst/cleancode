<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Version Control on Clean Code (and R-fun)</title>
    <link>https://rmhogervorst.nl/cleancode/tags/version-control/</link>
    <description>Recent content in Version Control on Clean Code (and R-fun)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hogervorst.rm@gmail.com (Roel M. Hogervorst)</managingEditor>
    <webMaster>hogervorst.rm@gmail.com (Roel M. Hogervorst)</webMaster>
    <lastBuildDate>Tue, 19 Dec 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://rmhogervorst.nl/cleancode/tags/version-control/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>If blogging was like academia, we would all be saved, thank you for your edits.</title>
      <link>https://rmhogervorst.nl/cleancode/blog/2017/12/19/content/post/2017-12-19-if-blogging-was-like-academia/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>https://rmhogervorst.nl/cleancode/blog/2017/12/19/content/post/2017-12-19-if-blogging-was-like-academia/</guid>
      <description>&lt;p&gt;A month ago I posted a short piece inspired by a  &lt;a href=&#34;http://www.masalmon.eu/2017/11/16/wheretoliveus/&#34;&gt;post by Maële Salmon&lt;/a&gt;
She actually reached out to me in 10 minutes, telling me I made a weird spelling
error (no excuses, I really make those a lot). Then a day or two later &lt;a href=&#34;https://github.com/jonspring&#34;&gt;Jon Spring &lt;/a&gt;
walked through the code and realized that I switched two outcomes in the code.&lt;/p&gt;

&lt;p&gt;Just about 10 days ago I posted about downloading multiple files and
Mara Avarick noticed a weird &amp;lsquo;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;rsquo; sign on my website. It was only happening
on chrome ( I couldn&amp;rsquo;t reproduced it in firefox, and it had to do with a few
botched merges in the past). But I would have never found out about it on my own.&lt;/p&gt;

&lt;p&gt;And that is awesome! Some people make the effort to reach out via twitter or
on github, just to make things better for everyone.&lt;/p&gt;

&lt;p&gt;That is the great thing about blogging using version-controlled software, not only can I change what I did, but the history and thank yous are part
of the entire project. It is very transparent (if you know about git) and available for everyone to read. imagine if this was an academic paper (granted, I would have checked my work slightly more thorough before publishing), not only would you probably not be able to read it (it would be behind a paywall), it would be incredibly difficult for me to change the content of the paper.&lt;/p&gt;

&lt;p&gt;Now I guess there is an official American holiday to thank people, but since I am not American I can thank whoever, whenever I please&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The point is, I am incredibly grateful for all those
helpful comments, issues, and sometimes even emails!
So thank you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/spHCUbRqG4cjS/giphy.gif&#34; alt=&#34;minnion thanking you gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[1]: And so can you!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;1 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Your most valuable collaborator, future-you</title>
      <link>https://rmhogervorst.nl/cleancode/blog/2016/05/26/content/post/2016-05-26-your-most-valuable-collaborator-future-you/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>https://rmhogervorst.nl/cleancode/blog/2016/05/26/content/post/2016-05-26-your-most-valuable-collaborator-future-you/</guid>
      <description>

&lt;p&gt;I was recently at a R users &lt;a href=&#34;http://www.meetup.com/amst-R-dam/&#34; title=&#34;amst-R-dam&#34;&gt;meetup&lt;/a&gt; where Hadley Wickham talked about data wrangling. He showed some interesting stuff! Did you know that you can put a data frame into a data frame? You can make a list of data frames and add that list to your data frame. Very cool,  and more useful then I thought, but that is not what I wanted to talk about.&lt;/p&gt;

&lt;p&gt;I would like to give you some tips about working with someone you will probably work with in the future. Hadley will introduce that person to you:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“In every project you have at least one other collaborator; future-you. You don&amp;rsquo;t want future-you to curse past-you”&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And future-you is an important collaborator. I have worked with R for a almost two years &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and when I look back I actually see some progress in what I do with R. Most of the things I did in the past were poorly documented. I recently wanted to update my imdb search package but I decided not to touch it, because I don&amp;rsquo;t know what will break if I change some things. I have less worries for more recent packages, because I have tests for almost all the functions and I could just run the tests after every change to see if the functionality is still there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[update: I tried to find older creations in my github, but I was actually pretty impressed by how well documented it all was! So my example is not so good, or I just didn&amp;rsquo;t upload bad examples&amp;hellip;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What I did find was that hurry jobs take up the most time in the end. If I just coded something up fast and  then revisit that after a week it might still work and I might still know what I meant to do. But if the time delay gets longer future-you will need to spend more time figuring out what past-you was trying to achieve.&lt;/p&gt;

&lt;p&gt;So even if you are in a hurry now, you will  not remember the reasons for certain decisions in the future. Especially if your project gets bigger, you tend to forget things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key thing is to be as explicit and clear as possible towards future-you&lt;/strong&gt;. So how do we help future-you (or other collaborators) understand past-you?&lt;/p&gt;

&lt;p&gt;Here are some suggestions based on lots of quotes and tidbits.&lt;/p&gt;

&lt;h2 id=&#34;readme-driven-development&#34;&gt;Readme driven development&lt;/h2&gt;

&lt;p&gt;Almost all of the github projects have a nicely formated readme. This is a very simple markdown document that describes the overal intent of the project and how to use and install it. The readme is a nice documentation of the software. So how do you make sure that the readme accurately describes the software?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You write the readme first.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tom Preson-Werner wrote a nice &lt;a href=&#34;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&#34; title=&#34; readme driven development 2010-08-23&#34;&gt;article&lt;/a&gt; about this. If you write the readme first then you can think through the project first and you already know what the end user (probably mostly future-you) will need. And you don&amp;rsquo;t need to write the documentation afterwards.  I have actually tried this in a few projects (f.i. &lt;a href=&#34;https://github.com/RMHogervorst/badgecreatr&#34;&gt;badgecreator&lt;/a&gt;), it helped me to think about the functions and the logical steps. And if you describe the next steps, other people can jump in more easily.&lt;/p&gt;

&lt;h2 id=&#34;write-the-test-first&#34;&gt;Write the test first&lt;/h2&gt;

&lt;p&gt;A way to understand past-you&amp;rsquo;s incoherent ramblings in the future (see what I did there?), is to write the tests before you write the part of the code that passes the test. I am talking about unit-tests, tests that check if your code is still working as you planned it out.&lt;/p&gt;

&lt;p&gt;So how would writing the tests first, help future-you and current(?)-you understand each other? If written correctly the unittest is a promise, an understanding if you like, about how pieces of code should function. For instance in one of my projects the unit-test expects an error under certain conditions. Thus the code is supposed to give an error when those conditions arise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test_that&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;rowsums larger or smaller than 1 are failing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,{&lt;/span&gt;
        expect_error&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;CreateVertices&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;errorset&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;var1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;var2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;vartoomuch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; verticeName &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;regexp &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;column means are not equal to 1&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        expect_error&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;CreateVertices&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;errorset&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;var1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;var2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;vartoolittle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; verticeName &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;regexp &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;column means are not equal to 1&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I really like the elegance of the testthat package, it &lt;strong&gt;literaly&lt;/strong&gt; says what it tests: &amp;ldquo; &lt;em&gt;test that&lt;/em&gt; rowsoms larger or smaller than 1 are failing&amp;rdquo;. And if the test fails it will tell you exactly &lt;strong&gt;where&lt;/strong&gt; it failed and &lt;strong&gt;what&lt;/strong&gt; it was trying to test (according to you).&lt;/p&gt;

&lt;p&gt;So how would you implement this? &lt;em&gt;I will make a seperate blogpost about this later, but for now look at r-pkg &lt;a href=&#34;http://r-pkgs.had.co.nz/tests.html&#34;&gt;chapter&lt;/a&gt; about testing&lt;/em&gt; Start with the thing you would like to create, for instance: Count all the people that are called Roel. That is nice small function. Give it a name: &lt;code&gt;roel_counter&lt;/code&gt;, for example.&lt;/p&gt;

&lt;p&gt;Create a seperate testscript &lt;code&gt;test_roel_counter.r&lt;/code&gt;. With the testthat framework you would put that file in &lt;code&gt;tests/testthat/&lt;/code&gt; so that it and all the other unit tests will be executed if you hit the shortkey.&lt;/p&gt;

&lt;p&gt;I usually write tests like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;context&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;roel_counter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
teststring &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Roel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Roel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hans&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
confusestring &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Roel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;roel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rOel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;roef&amp;#34;&lt;/span&gt;
         
test_that&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;roel_counter finds accurate number of roel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,{&lt;/span&gt;
   expect_equal&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;roel_counter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; teststring&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   expect_false&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;roel_counter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; teststring&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   expect_equal&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;roel_counter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; confusestring&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   expect_false&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;roel_counter&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; confusestring&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first test will check if Roel counter finds 2 Roels and the second test will check if the string will not just return the total length of the string.&lt;/p&gt;

&lt;p&gt;I could add all sorts of variations of my name to the test to see if the function works. In fact most of the things you would try out in the console to see if the function works could be put into the testfile. But in test driven development you would first create the tests and then write the function. After you have written a part of the code that works you will test and see what passes and what fails. Then you add things to the code to pass more tests. Afte all the tests have passed, you write a new test for a new part of the code.&lt;/p&gt;

&lt;p&gt;If current-you is interupted and future-you finds itself back at the code, future-you can just press the hotkey for the tests and find out which are failing and continue on that part. So in a way, future-you can explicitly find out what past-you was trying to achieve.&lt;/p&gt;

&lt;h2 id=&#34;use-version-control&#34;&gt;use version control&lt;/h2&gt;

&lt;p&gt;Version control can help you stay sane. It saves your work if you try something new, it helps you to start again at any previously committed point in history and apart from the merge errors it works generally very well.&lt;/p&gt;

&lt;p&gt;Version control lets you record snapshots of previous code, but also lets you comment on what you solved or changed. When you save a new version of the code to version control you will have to be a bit explicit. Otherwise you will find yourself in this situation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/wrong_commit.PNG&#34; alt=&#34;an example of a less helpful commit message&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Version control, if you use meaningful descriptions, can help you find out where you did some actions and what you were trying to do. Describe intent in the commit messages. A quote I really like is:&lt;br /&gt;
&amp;gt; &amp;ldquo;You mostly collaborate with yourself, and me-from-two-months-ago never responds to email.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;My commits have become somewhat better:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/example_better_commit.PNG&#34; alt=&#34;somewhat better commit messages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You could even use a github-issue-based-workflow where you write down the problems you want to solve in seperate issues and after you solved a particular issue, you push the code to github referencing the issue number.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&#34;functional-programming&#34;&gt;Functional programming&lt;/h2&gt;

&lt;p&gt;Hadley is really big on functional programming. That is, making clear what you want to achieve, and abstract away what happens in the computer itself.&lt;/p&gt;

&lt;p&gt;One example of this is the pipe operator. The pipe operator is in use in many programming languages (big thing in UNIX) but is not part of base r. Untill it was introduced in the magritr package&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; by Stefan Milton Bache. The pipe does nothing special except that it takes the thing to the left of it and places that in the first place of the thing to the right.
So for instance &lt;code&gt;dataset %&amp;gt;% filter(name==&amp;quot;Roel&amp;quot;)&lt;/code&gt; means that we start with dataset and then filter the rows that have &lt;code&gt;&amp;quot;Roel&amp;quot;&lt;/code&gt; in the name column.
In the background it does &lt;code&gt;filter(dataset, name == &amp;quot;Roel&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which makes code much much easier to read.
compare:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filter_by(select( filter(dataset, year == 2012), month, children, accidents ),accidents)&lt;/code&gt; with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dataset %&amp;gt;% 
filter(year==2012) %&amp;gt;% 
select(month, children, accidents) %&amp;gt;%
group_by(accidents)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then there the  map functions from the purr package, which essentially replace loops. Not because loops are inherently bad, but the functions focus on the operation being performed instead of the details of the loop itself. I will write about these functions once I get used to them in the future.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&#34;comments&#34;&gt;comments&lt;/h2&gt;

&lt;p&gt;A final thought about comments in the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do it often.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Describe in comments mostly what your intent was, or your reasons for a function. Don&amp;rsquo;t describe the &lt;strong&gt;what&lt;/strong&gt;, but describe the &lt;strong&gt;why&lt;/strong&gt;.
Do comment as often as you find necessary. More is better then less. However don&amp;rsquo;t put future plans or errors in the comments, you will not read them. An issue tracker is a great place for those.&lt;/p&gt;

&lt;h1 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;Think about this quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But looking back at this whole post, &lt;strong&gt;you&lt;/strong&gt; will probably be the violent psychopath maintaining the code.&lt;/p&gt;

&lt;p&gt;So these are some ways to help yourself in the future, try some and tell me how it went.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;references&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Or close to these words, I wrote it down later. - Wickham amsterdam 18-5-16
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;I don&amp;rsquo;t know exactly, but if I use the time when I created a Github Account (november third 2014) it is almost 19 months at the moment of writing.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;a tweet of mtholder: &lt;a href=&#34;https://twitter.com/kcranstn/status/370914072511791104&#34;&gt;https://twitter.com/kcranstn/status/370914072511791104&lt;/a&gt; text tweet: @mtholder motivating git: You mostly collaborate with yourself, and me-from-two-months-ago never responds to email. @swcarpentry
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;That might be too much, but it&amp;rsquo;s quite nice. if you type &amp;lsquo;closes #10&amp;rsquo; or &amp;lsquo;fix #10&amp;rsquo; github will close issue 10 and refer to that commit. I have also heard of people using seperate branches for problemfixing and using pull requests to the main branch to solve the issues (works the same with fix or closes). I have tried this approach in some cases and it helps structuring your work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;It took me forever to find out why it was called magritr. Because most R packages are named after their function or are a weird pun on something* I couldn&amp;rsquo;t place the name. But it is a pun on a famous painting by Magrit (La trahison des images, according to wikipedia) of a pipe with the text below &amp;ldquo;ceci n`est pa une pipe&amp;rdquo; &amp;lsquo;this is not a pipe&amp;rsquo;.&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Treachery_of_Images&#34;&gt;https://en.wikipedia.org/wiki/The_Treachery_of_Images&lt;/a&gt; and for the package &lt;a href=&#34;https://cran.r-project.org/web/packages/magrittr/index.html&#34;&gt;https://cran.r-project.org/web/packages/magrittr/index.html&lt;/a&gt;&lt;br /&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;See for more information about loops &lt;a href=&#34;http://r4ds.had.co.nz/iteration.html&#34;&gt;chapter 16 (iteration)&lt;/a&gt; of the &amp;ldquo;r for datascience&amp;rdquo; book by hadley wickham. The book is still under development but is a treasuretrove of information.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Version control with Git</title>
      <link>https://rmhogervorst.nl/cleancode/blog/2016/03/01/content/post/2016-03-01-version-control-start/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>https://rmhogervorst.nl/cleancode/blog/2016/03/01/content/post/2016-03-01-version-control-start/</guid>
      <description>

&lt;h2 id=&#34;keeping-track-of-versions&#34;&gt;Keeping track of versions&lt;/h2&gt;

&lt;p&gt;You work on a project and would like to keep track of what you did.
That is why keep old versions of your files. That way you can go back if you messed up beyond recognition.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usually that looks like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/versioncontrol2.png&#34; alt=&#34;filesystem without version control&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Or you use dropbox or something like it:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/dropboxversion.png&#34; alt=&#34;dropbox versions&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Other people use email. Emailing to themselves or to collaborators when they finished something.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that is fine. If it works, it works.
However in some cases you might want to go back to a previous version and work from there, or start with a variant your colleague made. That could become very difficult with these ways of versioning. Also you never know what changed in these versions untill you open the file and manually compare things. That gets tedious.&lt;/p&gt;

&lt;h2 id=&#34;version-control-software&#34;&gt;Version control software&lt;/h2&gt;

&lt;p&gt;With version control software you can create snapshots of the points where you fixed bugs, where you finished features and even better, you can  tell exactly  where versions of the file are different.&lt;/p&gt;

&lt;p&gt;The most widely used software are Mercurial, SVN and GIT. We will work with GIT, first of all because it can be used with &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN&#34; title=&#34;Version control with git - Rstudio&#34;&gt;Rstudio&lt;/a&gt;, though svn works too, and second because it works nicely with Github.&lt;/p&gt;

&lt;p&gt;So how does Git work? Every time you reach a point in you project that you think is critical, you make a commit. You save a current state of all the files in the directory. And when you make this snapshot of your files, you can (and should) write down what you solved and what you changed since last time. In the future when you look back at your commit history you can read in what state your project was.&lt;/p&gt;

&lt;p&gt;In the next example you can see what changed in the files, without even looking at the files themselves.
&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/commits_example.png&#34; alt=&#34;commits from test_dat, from github&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;branching&#34;&gt;Branching&lt;/h3&gt;

&lt;p&gt;Even better, you can start from any saved point in time and create a new version. And when you like that version better, merge it back into an other version.
&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/branching.png&#34; alt=&#34;branches&#34; /&gt;
In the example above, at the second commit I branched (purple line). the third row from below is a commit in the purple branch. Then I changed something in the normal branch and finally I merged the blue and purple line in the second line from the top.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to use branching, just saving important points along the way is a great start (It would be the point where you email yourself a version, or save a new version of the file).&lt;/p&gt;

&lt;h2 id=&#34;starting-with-git&#34;&gt;Starting with Git&lt;/h2&gt;

&lt;p&gt;Git was developed by people at Linux because their other version control software was hard to work with [^1]. Git is designed to work with a distributed nonlinear workflow&amp;hellip; Which means that everyone can work at any time at their version of software and you can merge those versions together. What you need to know is that it works, it&amp;rsquo;s free, works on all systems, and that many people use it. You can use it for your projects, even if you work alone. It helps keeping your files under control and makes it easy to go back to previous versions of your files. It is not a backup solution (please make backups!) and it is not a unicorn [^2]. But how do you work with git?&lt;/p&gt;

&lt;h3 id=&#34;graphical-user-interfaces-gui-for-git&#34;&gt;graphical user interfaces (gui) for git&lt;/h3&gt;

&lt;p&gt;Git lives in the command line, you need to navigate to the right folder on your computer within the command line, and type the right commands. Unfortunately I always forget what the commands are. But for people like me there is a GUI for windows that takes care of many things. But I would actually recommend Sourcetree for windows (mac also). It&amp;rsquo;s a graphical user interface where you keep track of all your repositories. It&amp;rsquo;s a great tool, see &lt;a href=&#34;https://www.youtube.com/watch?v=1lBdlh3AGSc&#34;&gt;this&lt;/a&gt; youtube video for a short [14 mins] tutorial into sourcetree.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do I need to install all this new sofware? I&amp;rsquo;m just coding for fun!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No, you don&amp;rsquo;t have to. All I would recommend is to &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;download Git&lt;/a&gt; and install it. Rstudio has gitsupport build in, you only need to install git on your system and tell rstudio where to find it. After that you can click icons.&lt;/p&gt;

&lt;h3 id=&#34;rstudio-and-git&#34;&gt;Rstudio and Git&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN&#34;&gt;Rstudio&lt;/a&gt;, you will have to activate git support after you have downloaded and installed it to your computer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Global Options (from the Tools menu)&lt;/li&gt;
&lt;li&gt;Click Git/SVN&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;Enable version control interface for RStudio projects&amp;rsquo;&lt;/li&gt;
&lt;li&gt;If necessary, enter the path for your Git or SVN executable where provided.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/enabling-git-rstudio.PNG&#34; alt=&#34;enabling git in rstudio example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, how do you use version control within Rstudio?&lt;/p&gt;

&lt;h1 id=&#34;rstudio-project-and-git&#34;&gt;Rstudio project and git.&lt;/h1&gt;

&lt;p&gt;Start a new project
&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-create-new-project.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose an empty project in a new directory&lt;/p&gt;

&lt;p&gt;and then click &amp;lsquo;Create a git repository&amp;rsquo;
&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-new-project-enablegit.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The repo and real folder on windows 8.1 look like this.
&lt;figure class=&#34;half&#34;&gt;
    &lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-empty-git.PNG&#34; alt=&#34;image&#34;&gt;
    &lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/folderview-new-git-project.PNG&#34; alt=&#34;image&#34;&gt;
    &lt;figcaption&gt;rstudio and the real folder with hidden folders showing&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;When you start a new project a Rproject file is placed in the folder that contains all the project settings you have. But when you enable git, a .gitignore file is also placed in your folder. That file tells git which files not to track for changes. Rproject makes sure that the the temporary r files are not tracked, because temporary files will be recreated every time and tracking them is useless. In my case I have turned on the &amp;lsquo;show hidden files&amp;rsquo; option in windows. If you don&amp;rsquo;t have that on (and you don&amp;rsquo;t have to) you will only see the gitignore file (with no name) and the rstudioproject file.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look back at rstudio git tab.&lt;/p&gt;

&lt;h2 id=&#34;git-version-control-within-rstudio-your-first-commit&#34;&gt;Git version control within Rstudio: your first commit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-git-first-commit.PNG&#34; alt=&#34;&#34; /&gt;
I have added the second file, the icon changes to a green A (short for: add to repository), the first one shows two yellow questionmarks (short for: not tracked, not changed, I think).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add the two files of your project and click &amp;lsquo;commit&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new window will open:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-git-commit-window.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The left part of the screen shows what files are in the commit, the bottom part displays the changes since last commit. Green means added, red means subtracted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the second file in your commit, the bottom part displays what has changed.&lt;/li&gt;
&lt;li&gt;Write a commit message, never commit without a message, if you don&amp;rsquo;t have a description, it probably wasn&amp;rsquo;t worth committing. The message does not have to be long, short is better. in this case I used: &amp;ldquo;init commit&amp;rdquo; That just tells me it was the first commit before I did anything.&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;commit&amp;rsquo; when you typed your description.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a window will open with a description of what happened.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-git-commit-message.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you return to the main view of rstudio you will see that the git tab has changed a bit, there are no files (because nothing has changed yet since your commit 2 seconds ago) and next to the gear wheel it says: &amp;lsquo;master&amp;rsquo; . This is the branch you are on right now. By default the first branch is master.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a new file&lt;/p&gt;

&lt;h2 id=&#34;git-version-control-within-rstudio-your-first-new-file&#34;&gt;Git version control within Rstudio: your first new file.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a new file and fill it with some code or:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# This is a awesome function&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# It takes a number and gives you &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# the corresponding letter in the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# alphabet.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 2016-02-27&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# YOUR name &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Then save it in scripts/  (yes, you must create that folder as well, or don&amp;rsquo;t I&amp;rsquo;m not the police&amp;hellip;)&lt;/li&gt;
&lt;li&gt;add it to the repo (clicking it will tell git to track that file from now on)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will look like this
&lt;figure class=&#34;half&#34;&gt;
    &lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-commit1.PNG&#34; alt=&#34;before tracking&#34;&gt;
    &lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-commit2.PNG&#34; alt=&#34;after tracking&#34;&gt;
    &lt;figcaption&gt;rstudio adding files to commit before and after&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the history of your commits, click on the clock in the git tab.
Mine looks like this:
&lt;img src=&#34;https://rmhogervorst.nl/cleancode/img/rstudio-commit-history.PNG&#34; alt=&#34;rstudio commit history&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note the commit message, it says what the commit adds to the repo. Try to write your messages as if you fulfull a order and discribe the contents. For example: &amp;ldquo;adds count_messages function that counts messages send to the user&amp;rdquo;
or, &amp;ldquo;fix issue #2 can&amp;rsquo;t work with arrays&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;That way you can scan through your commits and see what changed where. When you click on a commit you can see what changed since the commit before.&lt;/p&gt;

&lt;h2 id=&#34;some-questions&#34;&gt;some questions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Will version control eat up all my hard disk space?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No, first of all all r scripts are essentially plain text files and take up little space and second, git only saves what changed since the last time. So the total file size should not go up that much. And third, space is cheap, you will not easily run out of space on modern computers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice! Can I add my data files to a git repo as well?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is not recommended to add datafiles to a repo. I think it can work with plain text files such as .txt, .csv, .tdv . But many other files can&amp;rsquo;t be read by git, so it treats them as binary files. Git can only see that the file has changed, but doesn&amp;rsquo;t know WHAT changed. So it saves the new version as a whole. If you have some large binary files that change often, they will eat up a lot of space. There is a git large file system but I don&amp;rsquo;t know how it works yet.
Do add example csv files or smaller files if you&amp;rsquo;d like to.&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN&#34;&gt;Git in Rstudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;git website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.r-bloggers.com/?s=git&#34;&gt;r-blogger.com all articles about git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow&#34;&gt;Atlassian company of Sourcetree, has a long read about branching models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://r-bio.github.io/intro-git-rstudio/&#34;&gt;r-bio example of git and rstudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;best resource&lt;/strong&gt; is &lt;a href=&#34;https://stat545-ubc.github.io/git00_index.html&#34; title=&#34;pages about git&#34;&gt;https://stat545-ubc.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[^1]: Linus Torvald (the main man behind linux) actually said he wouldn&amp;rsquo;t touch subversion with a ten-foot pole. &lt;a href=&#34;https://git.wiki.kernel.org/index.php/LinusTalk200705Transcript&#34;&gt;https://git.wiki.kernel.org/index.php/LinusTalk200705Transcript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[^2]: &lt;em&gt;Chasing unicorns, the pursuit of something that’s, for all intents and purposes, unobtainable as unicorns don&amp;rsquo;t exist.&lt;/em&gt; Meaning it doesn&amp;rsquo;t magically solve all the problems other version control software has.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>