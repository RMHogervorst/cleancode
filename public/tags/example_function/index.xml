<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example_function on Clean Code</title>
    <link>/cleancode/tags/example_function/</link>
    <description>Recent content in Example_function on Clean Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hogervorst.rm@gmail.com (Roel M. Hogervorst)</managingEditor>
    <webMaster>hogervorst.rm@gmail.com (Roel M. Hogervorst)</webMaster>
    <lastBuildDate>Fri, 29 Dec 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/cleancode/tags/example_function/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding bananas from the commandline (extending the oomsifier)</title>
      <link>/cleancode/blog/2017/12/29/content/post/2017-12-29-extending-the-oomsifyer-cmdline/</link>
      <pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>/cleancode/blog/2017/12/29/content/post/2017-12-29-extending-the-oomsifyer-cmdline/</guid>
      <description>

&lt;p&gt;Sometimes you just want to add bananas from the commandline. &lt;a href=&#34;http://rmhogervorst.nl/cleancode/blog/2017/11/28/building-the-oomsifier.html&#34;&gt;Previously&lt;/a&gt;
I created a small script that takes an image and adds a dancing banana to the bottom left of the image. I wanted to make an API too, but that will have to wait till next year. Today we will create a commandline script that will do the same thing.&lt;/p&gt;

&lt;p&gt;With the excellent explanation in &lt;a href=&#34;http://blog.sellorm.com/2017/12/18/learn-to-write-command-line-utilities-in-r/&#34;&gt;Mark Sellors&amp;rsquo; guide&lt;/a&gt; I have now created a cmdline thingy in very few steps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/cleancode/img/r-pkg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I can now add bananas from the commandline with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bananafy.R ../images/ggplotexample.png out.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This executes and says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Linking to ImageMagick 6.9.7.4
Enabled features: fontconfig, freetype, fftw, lcms, pango, x11
Disabled features: cairo, ghostscript, rsvg, webp
writing bananafied image to out.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-modified-script&#34;&gt;The modified script&lt;/h4&gt;

&lt;p&gt;First the script itself, saved as bananafy.R&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/Rscript --vanilla
args &amp;lt;- commandArgs(trailingOnly = TRUE)
if (length(args) &amp;lt; 1){
    stop(&amp;quot;I think you forgot to input an image and output name? \n&amp;quot;)
}

library(magick)
## Commandline version of add banana
#banana &amp;lt;- image_read(&amp;quot;images/banana.gif&amp;quot;) # this assumes you have a project with the folder /images/ inside.

#add_banana &amp;lt;- function(, offset = NULL, debug = FALSE){
offset &amp;lt;- NULL # maybe a third argument here would be cool?
debug &amp;lt;- FALSE
image_in &amp;lt;- magick::image_read(args[[1]])
banana &amp;lt;- image_read(&amp;quot;../images/banana.gif&amp;quot;) # 365w 360 h
image_info &amp;lt;- image_info(image_in)
if(&amp;quot;gif&amp;quot; %in% image_info$format ){stop(&amp;quot;gifs are to difficult for  me now&amp;quot;)}
stopifnot(nrow(image_info)==1)
# scale banana to correct size:
# take smallest dimension.
target_height &amp;lt;- min(image_info$width, image_info$height)
# scale banana to 1/3 of the size
scaling &amp;lt;-  (target_height /3)
front &amp;lt;- image_scale(banana, scaling)
# place in lower right corner
# offset is width and hieight minus dimensions picutre?
scaled_dims &amp;lt;- image_info(front)
x_c &amp;lt;- image_info$width - scaled_dims$width
y_c &amp;lt;- image_info$height - scaled_dims$height
offset_value &amp;lt;- ifelse(is.null(offset), paste0(&amp;quot;+&amp;quot;,x_c,&amp;quot;+&amp;quot;,y_c), offset)
if(debug) print(offset_value)
frames &amp;lt;- lapply(as.list(front), function(x) image_composite(image_in, x, offset = offset_value))

result &amp;lt;- image_animate(image_join(frames), fps = 10)
message(&amp;quot;writing bananafied image to&amp;quot;, args[[2]])
image_write(image = result, path = args[[2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might notice I copied the entire thing from the previous post and added some extra Things&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It starts with &amp;lsquo;#!/usr/bin/Rscript&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to Mark:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sometimes called a ‘shebang’, this line tells the Linux and MacOS command line interpreters (which both default to one called ‘bash’), what you want to use to run the rest of the code in the file. &amp;hellip;.The &amp;ndash;vanilla on the end, tells Rscript to run without saving or restoring anything in the process. This just keeps things nice a clean.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve added a message call that tells me where the script saves the image. I could have suppressed the magic messages, but meh, it is a proof of concept.&lt;/p&gt;

&lt;p&gt;To make it work, you have to tell linux (which I&amp;rsquo;m working on) that it can execute the file. That means changing the permissions on that file&lt;/p&gt;

&lt;p&gt;In the terminal you go to the projectfolder and type &lt;code&gt;chmod +x bananafy.R&lt;/code&gt;. You CHange MODe by adding (+) eXecution rights to that file.&lt;/p&gt;

&lt;h3 id=&#34;advanced-use-making-bananafy-options-available-always-and-everywhere-in-the-terminal&#34;&gt;advanced use: making bananafy options available always and everywhere in the terminal.&lt;/h3&gt;

&lt;p&gt;We could make the bananafyer available to you always in in every folder. T do that you could move the script to f.i. ~/scripts/,  modify the code a bit and add the bananagif to that same folder. You then have to &lt;a href=&#34;https://askubuntu.com/questions/153251/launch-shell-scripts-from-anywhere&#34;&gt;modify your bashrc file&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I had to make the link to the banana hardcoded: &amp;lsquo;~/scripts/images/banana.gif&amp;rsquo;&lt;/li&gt;
&lt;li&gt;you can call the code from anywhere and the output of the script will end up in the folder you currently are in. So if I&amp;rsquo;m in ~/pictures/reallynicepictures the bananafied image will be there.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building the oomsifyer</title>
      <link>/cleancode/blog/2017/11/28/content/post/2017-11-28-building-the-oomsifier/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      <author>hogervorst.rm@gmail.com (Roel M. Hogervorst)</author>
      <guid>/cleancode/blog/2017/11/28/content/post/2017-11-28-building-the-oomsifier/</guid>
      <description>

&lt;p&gt;Today I will show you a quick hack (OK it took me like 4 hours during my travels today yesterday and today),
on how to add a dancing banana to any picture.&lt;/p&gt;

&lt;p&gt;Now, you might be thinking&amp;hellip; Really, why would you add a dancing banana to
a picture, but I don&amp;rsquo;t have time for that kind of negativity in my life.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/cleancode/img/r-pkg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-oomsifier&#34;&gt;Why oomsifier?&lt;/h2&gt;

&lt;p&gt;Jeroen Ooms is one of those crazy productive people in the R world. The way he
wraps c++ libraries into packages makes you think his middle name is c-plus-plus.&lt;/p&gt;

&lt;p&gt;At the Sat-R-day in budapest in 2016 (?) Jeroen demonstrated the magick library.
You can now control images from inside R using dark magic and the bindings to
 the magick library. In honor of this work and because I needed a cool name,
I will demonstrate &lt;strong&gt;THE OOMSIFYER&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Solving the life long dream of people all around the world &amp;hellip; of adding dancing banana gifs to pictures&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are like me, you would have thought this would be really easy, but you would be wrong.&lt;/p&gt;

&lt;p&gt;First the function then the explanation and some stuff that took me waaay too long
to find out.&lt;/p&gt;

&lt;p&gt;The function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;banana &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_read&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;images/banana.gif&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# this assumes you have a project with the folder /images/ inside.&lt;/span&gt;

add_banana &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; offset &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; debug &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    image_in &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; magick&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;image_read&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    banana &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_read&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;images/banana.gif&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 365w 360 h&lt;/span&gt;
    image_info &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_info&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image_in&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gif&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%in%&lt;/span&gt; image_info&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;format &lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gifs are to difficult for  me now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
    &lt;span class=&#34;kp&#34;&gt;stopifnot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image_info&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# scale banana to correct size:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# take smallest dimension.&lt;/span&gt;
    target_height &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image_info&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;width&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; image_info&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;height&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# scale banana to 1/3 of the size&lt;/span&gt;
    scaling &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;target_height &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    front &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_scale&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;banana&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; scaling&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# place in lower right corner&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# offset is width and hieight minus dimensions picutre?&lt;/span&gt;
    scaled_dims &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_info&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;front&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    x_c &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_info&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;width &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; scaled_dims&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;width
    y_c &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_info&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;height &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; scaled_dims&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;height
    offset_value &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ifelse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;is.null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;offset&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;x_c&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;y_c&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; offset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;offset_value&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    frames &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;front&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; image_composite&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image_in&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; offset &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; offset_value&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    result &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; image_animate&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;image_join&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;frames&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; fps &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    result
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;so-what-can-it-do&#34;&gt;So what can it do?&lt;/h2&gt;

&lt;p&gt;This function takes an image, f.i. a ggplot2 image that you saved to disk, and adds the dancing banana gif to the bottom right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/cleancode/img/ggplot.gif&#34; alt=&#34;ggplot with banana example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I had to combine information from the magick &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/vignettes/intro.html#animation&#34;&gt;vignette&lt;/a&gt;  and an earlier &lt;a href=&#34;https://ropensci.org/blog/2016/08/23/z-magick-release/&#34;&gt;blogpost&lt;/a&gt; about magick in R.&lt;/p&gt;

&lt;p&gt;Things I learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the magick package returns image information as a data frame&lt;/li&gt;
&lt;li&gt;a gif is a succesion of images (frames)&lt;/li&gt;
&lt;li&gt;a normal picture is a single frame&lt;/li&gt;
&lt;li&gt;to combine a gif and a single frame you have to have exactly as much frames of your original picture as the number of frames in the gif&lt;/li&gt;
&lt;li&gt;for every frame you have to merge the gif and image with each other into a composite image&lt;/li&gt;
&lt;li&gt;the offset is the number of pixels from the left of the frame and from the top of the frame. I wanted to put the dancing banana at the bottom right of the picture AND I wanted to scale the banana so that it would take over the entire image so the offset needed to be responsive to both scaling and the input dimensions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/ThePracticalDev&#34;&gt;the practical dev&lt;/a&gt; has many silly o-reilly like book covers that I find hilarious&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/cleancode/img/spss.gif&#34; alt=&#34;spss picture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In a the following posts I might turn this function into an API, stay tuned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>